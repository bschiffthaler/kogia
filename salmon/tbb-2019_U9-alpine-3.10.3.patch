--- tbb-2019_U9/src/tbbmalloc/proxy.cpp
+++ tbb-2019_U9_new/src/tbbmalloc/proxy.cpp
@@ -24,15 +24,6 @@
 // of aligned_alloc as required by new C++ standard, this makes it hard to
 // redefine aligned_alloc here. However, running on systems with new libc
 // version, it still needs it to be redefined, thus tricking system headers
-#if defined(__GLIBC_PREREQ) && !__GLIBC_PREREQ(2, 16) && _GLIBCXX_HAVE_ALIGNED_ALLOC
-// tell <cstdlib> that there is no aligned_alloc
-#undef _GLIBCXX_HAVE_ALIGNED_ALLOC
-// trick <stdlib.h> to define another symbol instead
-#define aligned_alloc __hidden_redefined_aligned_alloc
-// Fix the state and undefine the trick
-#include <cstdlib>
-#undef aligned_alloc
-#endif // defined(__GLIBC_PREREQ)&&!__GLIBC_PREREQ(2, 16)&&_GLIBCXX_HAVE_ALIGNED_ALLOC
 #endif // __linux__ && !__ANDROID__
 
 #include "proxy.h"
--- tbb-2019_U9/src/tbbmalloc/proxy.h
+++ tbb-2019_U9_new/src/tbbmalloc/proxy.h
@@ -28,6 +28,21 @@
 
 #include <stddef.h>
 
+struct mallinfo
+{
+  int arena;    /* non-mmapped space allocated from system */
+  int ordblks;  /* number of free chunks */
+  int smblks;   /* number of fastbin blocks */
+  int hblks;    /* number of mmapped regions */
+  int hblkhd;   /* space in mmapped regions */
+  int usmblks;  /* maximum total allocated space */
+  int fsmblks;  /* space available in freed fastbin blocks */
+  int uordblks; /* total allocated space */
+  int fordblks; /* total free space */
+  int keepcost; /* top-most, releasable (via malloc_trim) space */
+};
+
+
 extern "C" {
     void * scalable_malloc(size_t size);
     void * scalable_calloc(size_t nobj, size_t size);
